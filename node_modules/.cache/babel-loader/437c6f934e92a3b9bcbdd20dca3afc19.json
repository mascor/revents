{"ast":null,"code":"var _jsxFileName = \"/Users/massimilianocorvino/Desktop/temp/revents/src/features/sandbox/TestPlaceInput.jsx\";\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nexport default function TestPlaceInput({\n  setLocation\n}) {\n  const [address, setAddress] = useState('');\n\n  function handleChange(address) {\n    setAddress(address);\n  }\n\n  function handleSelect(address) {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n      console.log('Success', latLng);\n      setLocation(latLng);\n    }).catch(error => console.error('Error', error));\n    setAddress(address);\n  }\n\n  return /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: handleChange,\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n    placeholder: 'Search Places ...',\n    className: 'location-search-input'\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: '#fafafa',\n      cursor: 'pointer'\n    } : {\n      backgroundColor: '#ffffff',\n      cursor: 'pointer'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }, suggestion.description));\n  }))));\n}","map":{"version":3,"sources":["/Users/massimilianocorvino/Desktop/temp/revents/src/features/sandbox/TestPlaceInput.jsx"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","TestPlaceInput","setLocation","address","setAddress","handleChange","handleSelect","then","results","latLng","console","log","catch","error","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAKA,eAAe,SAASC,cAAT,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAAuC;AACpD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AAEA,WAASQ,YAAT,CAAsBF,OAAtB,EAA+B;AAC7BC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD;;AAED,WAASG,YAAT,CAAsBH,OAAtB,EAA+B;AAC7BJ,IAAAA,gBAAgB,CAACI,OAAD,CAAhB,CACGI,IADH,CACSC,OAAD,IAAaR,SAAS,CAACQ,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEGD,IAFH,CAESE,MAAD,IAAY;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACAP,MAAAA,WAAW,CAACO,MAAD,CAAX;AACD,KALH,EAMGG,KANH,CAMUC,KAAD,IAAWH,OAAO,CAACG,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CANpB;AAOAT,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD;;AAED,sBACE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEA,OADT;AAEE,IAAA,QAAQ,EAAEE,YAFZ;AAGE,IAAA,QAAQ,EAAEC,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AAAEQ,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,+CACMH,aAAa,CAAC;AAChBI,IAAAA,WAAW,EAAE,mBADG;AAEhBC,IAAAA,SAAS,EAAE;AAFK,GAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAOE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGF,WAAW,CAACK,GAAZ,CAAiBC,UAAD,IAAgB;AAC/B,UAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD+B,CAI/B;;AACA,UAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACV;AAAEE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KADU,GAEV;AAAED,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAFJ;AAGA,wBACE,6CACMT,sBAAsB,CAACK,UAAD,EAAa;AACrCF,MAAAA,SADqC;AAErCI,MAAAA;AAFqC,KAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOF,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,GAlBA,CAFH,CAPF,CANJ,CADF;AAwCD","sourcesContent":["import React, { useState } from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nexport default function TestPlaceInput({setLocation}) {\n  const [address, setAddress] = useState('');\n\n  function handleChange(address) {\n    setAddress(address);\n  }\n\n  function handleSelect(address) {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => {\n        console.log('Success', latLng);\n        setLocation(latLng);\n      })\n      .catch((error) => console.error('Error', error));\n    setAddress(address);\n  }\n\n  return (\n    <PlacesAutocomplete\n      value={address}\n      onChange={handleChange}\n      onSelect={handleSelect}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n          <input\n            {...getInputProps({\n              placeholder: 'Search Places ...',\n              className: 'location-search-input',\n            })}\n          />\n          <div className='autocomplete-dropdown-container'>\n            {loading && <div>Loading...</div>}\n            {suggestions.map((suggestion) => {\n              const className = suggestion.active\n                ? 'suggestion-item--active'\n                : 'suggestion-item';\n              // inline style for demonstration purpose\n              const style = suggestion.active\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n              return (\n                <div\n                  {...getSuggestionItemProps(suggestion, {\n                    className,\n                    style,\n                  })}\n                >\n                  <span>{suggestion.description}</span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </PlacesAutocomplete>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}