{"ast":null,"code":"import { asyncActionStart, asyncActionFinish, asyncActionError } from '../../app/async/asyncReducer';\nimport { delay } from '../../app/common/util/util';\nimport { toast } from 'react-toastify';\nexport const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\nexport function increment(amount) {\n  return async function (dispatch) {\n    dispatch(asyncActionStart());\n\n    try {\n      await delay(1000);\n      dispatch({\n        type: INCREMENT_COUNTER,\n        payload: amount\n      });\n      dispatch(asyncActionFinish());\n    } catch (error) {\n      dispatch(asyncActionError(error));\n    }\n  };\n}\nexport function decrement(amount) {\n  return async function (dispatch) {\n    dispatch(asyncActionStart());\n\n    try {\n      await delay(1000);\n      dispatch({\n        type: DECREMENT_COUNTER,\n        payload: amount\n      });\n      dispatch(asyncActionFinish());\n    } catch (error) {\n      dispatch(asyncActionError(error));\n      toast.error(error);\n    }\n  };\n}\nconst initialState = {\n  data: 42\n};\nexport default function testReducer(state = initialState, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case INCREMENT_COUNTER:\n      return { ...state,\n        data: state.data + payload\n      };\n\n    case DECREMENT_COUNTER:\n      return { ...state,\n        data: state.data - payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/massimilianocorvino/Desktop/temp/revents/src/features/sandbox/testReducer.js"],"names":["asyncActionStart","asyncActionFinish","asyncActionError","delay","toast","INCREMENT_COUNTER","DECREMENT_COUNTER","increment","amount","dispatch","type","payload","error","decrement","initialState","data","testReducer","state"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,iBAA1B,EAA6CC,gBAA7C,QAAoE,8BAApE;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AAC9B,SAAO,gBAAeC,QAAf,EAAyB;AAC9BA,IAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,YAAMG,KAAK,CAAC,IAAD,CAAX;AACAM,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAEL,iBAAP;AAA0BM,QAAAA,OAAO,EAAEH;AAAnC,OAAD,CAAR;AACAC,MAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AACD,KAJD,CAIE,OAAOW,KAAP,EAAc;AACdH,MAAAA,QAAQ,CAACP,gBAAgB,CAACU,KAAD,CAAjB,CAAR;AACD;AACF,GATD;AAUH;AAED,OAAO,SAASC,SAAT,CAAmBL,MAAnB,EAA2B;AAChC,SAAO,gBAAeC,QAAf,EAAyB;AAC9BA,IAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,YAAMG,KAAK,CAAC,IAAD,CAAX;AACAM,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAEJ,iBAAP;AAA0BK,QAAAA,OAAO,EAAEH;AAAnC,OAAD,CAAR;AACAC,MAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AACD,KAJD,CAIE,OAAOW,KAAP,EAAc;AACdH,MAAAA,QAAQ,CAACP,gBAAgB,CAACU,KAAD,CAAjB,CAAR;AACAR,MAAAA,KAAK,CAACQ,KAAN,CAAYA,KAAZ;AACD;AACF,GAVD;AAWD;AAGD,MAAME,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGH,YAA7B,EAA2C;AAACJ,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAA3C,EAA4D;AACzE,UAAQD,IAAR;AACE,SAAKL,iBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,GAAaJ;AAFd,OAAP;;AAIF,SAAKL,iBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,GAAaJ;AAFd,OAAP;;AAIF;AACE,aAAOM,KAAP;AAZJ;AAcD","sourcesContent":["import {asyncActionStart, asyncActionFinish, asyncActionError} from '../../app/async/asyncReducer';\nimport { delay } from '../../app/common/util/util';\nimport {toast} from 'react-toastify';\n\nexport const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\n\nexport function increment(amount) {\n    return async function(dispatch) {\n      dispatch(asyncActionStart());\n      try {\n        await delay(1000);\n        dispatch({type: INCREMENT_COUNTER, payload: amount});\n        dispatch(asyncActionFinish());\n      } catch (error) {\n        dispatch(asyncActionError(error))\n      }\n    }\n}\n\nexport function decrement(amount) {\n  return async function(dispatch) {\n    dispatch(asyncActionStart());\n    try {\n      await delay(1000);\n      dispatch({type: DECREMENT_COUNTER, payload: amount});\n      dispatch(asyncActionFinish());\n    } catch (error) {\n      dispatch(asyncActionError(error));\n      toast.error(error);\n    }\n  }\n}\n\n\nconst initialState = {\n  data: 42,\n};\n\nexport default function testReducer(state = initialState, {type, payload}) {\n  switch (type) {\n    case INCREMENT_COUNTER:\n      return {\n        ...state,\n        data: state.data + payload,\n      };\n    case DECREMENT_COUNTER:\n      return {\n        ...state,\n        data: state.data - payload,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}