{"ast":null,"code":"var _jsxFileName = \"/Users/massimilianocorvino/Desktop/temp/revents/src/features/events/eventForm/EventForm.jsx\";\nimport React from 'react';\nimport { Segment, Header, Button } from 'semantic-ui-react';\nimport cuid from 'cuid';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createEvent, updateEvent } from '../eventActions';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryData } from '../../../app/api/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nexport default function EventForm({\n  match,\n  history\n}) {\n  const dispatch = useDispatch();\n  const selectedEvent = useSelector(state => state.event.events.find(e => e.id === match.params.id));\n  const initialValues = selectedEvent !== null && selectedEvent !== void 0 ? selectedEvent : {\n    title: '',\n    category: '',\n    description: '',\n    city: '',\n    venue: '',\n    date: ''\n  };\n  const validationSchema = Yup.object({\n    title: Yup.string().required('You must provide a title'),\n    category: Yup.string().required('You must provide a category'),\n    description: Yup.string().required(),\n    city: Yup.string().required(),\n    venue: Yup.string().required(),\n    date: Yup.string().required()\n  });\n  return /*#__PURE__*/React.createElement(Segment, {\n    clearing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      selectedEvent ? dispatch(updateEvent({ ...selectedEvent,\n        ...values\n      })) : dispatch(createEvent({ ...values,\n        id: cuid(),\n        hostedBy: 'Bob',\n        attendees: [],\n        hostPhotoURL: '/assets/user.png'\n      }));\n      history.push('/events');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting,\n    dirty,\n    isValid\n  }) => /*#__PURE__*/React.createElement(Form, {\n    className: \"ui form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    sub: true,\n    color: \"teal\",\n    content: \"Event Details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyTextInput, {\n    name: \"title\",\n    placeholder: \"Event title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MySelectInput, {\n    name: \"category\",\n    placeholder: \"Event category\",\n    options: categoryData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyTextArea, {\n    name: \"description\",\n    placeholder: \"Description\",\n    rows: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    sub: true,\n    color: \"teal\",\n    content: \"Event Location Details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyTextInput, {\n    name: \"city\",\n    placeholder: \"City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyTextInput, {\n    name: \"venue\",\n    placeholder: \"Venue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyDateInput, {\n    name: \"date\",\n    placeholderText: \"Event date\",\n    timeFormat: \"HH:mm\",\n    showTimeSelect: true,\n    timeCaption: \"time\",\n    dateFormat: \"MMMM d, yyyy h:mm a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    loading: isSubmitting,\n    disabled: !isValid || !dirty || isSubmitting,\n    type: \"submit\",\n    floated: \"right\",\n    positive: true,\n    content: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    as: Link,\n    to: \"/events\",\n    type: \"submit\",\n    floated: \"right\",\n    content: \"Cancel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/massimilianocorvino/Desktop/temp/revents/src/features/events/eventForm/EventForm.jsx"],"names":["React","Segment","Header","Button","cuid","Link","useSelector","useDispatch","createEvent","updateEvent","Formik","Form","Yup","MyTextInput","MyTextArea","MySelectInput","categoryData","MyDateInput","EventForm","match","history","dispatch","selectedEvent","state","event","events","find","e","id","params","initialValues","title","category","description","city","venue","date","validationSchema","object","string","required","values","hostedBy","attendees","hostPhotoURL","push","isSubmitting","dirty","isValid"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Segment, Header, Button } from 'semantic-ui-react';\nimport cuid from 'cuid';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createEvent, updateEvent } from '../eventActions';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryData } from '../../../app/api/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\n\nexport default function EventForm({ match, history }) {\n  const dispatch = useDispatch();\n  const selectedEvent = useSelector((state) =>\n    state.event.events.find((e) => e.id === match.params.id)\n  );\n\n  const initialValues = selectedEvent ?? {\n    title: '',\n    category: '',\n    description: '',\n    city: '',\n    venue: '',\n    date: '',\n  };\n\n  const validationSchema = Yup.object({\n    title: Yup.string().required('You must provide a title'),\n    category: Yup.string().required('You must provide a category'),\n    description: Yup.string().required(),\n    city: Yup.string().required(),\n    venue: Yup.string().required(),\n    date: Yup.string().required(),\n  });\n\n  return (\n    <Segment clearing>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values) => {\n          selectedEvent\n            ? dispatch(updateEvent({ ...selectedEvent, ...values }))\n            : dispatch(\n                createEvent({\n                  ...values,\n                  id: cuid(),\n                  hostedBy: 'Bob',\n                  attendees: [],\n                  hostPhotoURL: '/assets/user.png',\n                })\n              );\n          history.push('/events');\n        }}\n      >\n        {({ isSubmitting, dirty, isValid }) => (\n          <Form className='ui form'>\n            <Header sub color='teal' content='Event Details' />\n            <MyTextInput name='title' placeholder='Event title' />\n            <MySelectInput\n              name='category'\n              placeholder='Event category'\n              options={categoryData}\n            />\n            <MyTextArea name='description' placeholder='Description' rows={3} />\n            <Header sub color='teal' content='Event Location Details' />\n            <MyTextInput name='city' placeholder='City' />\n            <MyTextInput name='venue' placeholder='Venue' />\n            <MyDateInput\n              name='date'\n              placeholderText='Event date'\n              timeFormat='HH:mm'\n              showTimeSelect\n              timeCaption='time'\n              dateFormat='MMMM d, yyyy h:mm a'\n            />\n\n            <Button\n              loading={isSubmitting}\n              disabled={!isValid || !dirty || isSubmitting}\n              type='submit'\n              floated='right'\n              positive\n              content='Submit'\n            />\n            <Button\n              disabled={isSubmitting}\n              as={Link}\n              to='/events'\n              type='submit'\n              floated='right'\n              content='Cancel'\n            />\n          </Form>\n        )}\n      </Formik>\n    </Segment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}