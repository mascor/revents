{"ast":null,"code":"var _jsxFileName = \"/Users/massimilianocorvino/Desktop/temp/revents/src/app/common/form/MyPlaceInput.jsx\";\nimport React from 'react';\nimport { useField } from 'formik';\nimport { FormField, Label, Segment, List } from 'semantic-ui-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nexport default function MyPlaceInput({\n  label,\n  options,\n  ...props\n}) {\n  const [field, meta, helpers] = useField(props);\n\n  function handleSelect(address) {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => helpers.setValue({\n      address,\n      latLng\n    })).catch(error => helpers.setError(error));\n  }\n\n  function handleBlur(e) {\n    field.onBlur(e);\n\n    if (!field.value.latLng) {\n      helpers.setValue({\n        address: '',\n        latLng: null\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: field.value['address'],\n    onChange: value => helpers.setValue({\n      address: value\n    }),\n    onSelect: value => handleSelect(value),\n    searchOptions: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(FormField, {\n    error: meta.touched && !!meta.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n    name: field.name,\n    onBlur: e => handleBlur(e),\n    ...props\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(Label, {\n    basic: true,\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, meta.error['address']) : null, (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) > 0 && /*#__PURE__*/React.createElement(Segment, {\n    loading: loading,\n    style: {\n      marginTop: 0,\n      position: 'absolute',\n      zIndex: 1000,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    selection: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, suggestions.map(suggestion => /*#__PURE__*/React.createElement(List.Item, Object.assign({}, getSuggestionItemProps(suggestion), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(List.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, suggestion.formattedSuggestion.mainText), /*#__PURE__*/React.createElement(List.Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, suggestion.formattedSuggestion.secondaryText)))))));\n}","map":{"version":3,"sources":["/Users/massimilianocorvino/Desktop/temp/revents/src/app/common/form/MyPlaceInput.jsx"],"names":["React","useField","FormField","Label","Segment","List","PlacesAutocomplete","geocodeByAddress","getLatLng","MyPlaceInput","label","options","props","field","meta","helpers","handleSelect","address","then","results","latLng","setValue","catch","error","setError","handleBlur","e","onBlur","value","getInputProps","suggestions","getSuggestionItemProps","loading","touched","name","length","marginTop","position","zIndex","width","map","suggestion","formattedSuggestion","mainText","secondaryText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\nimport { FormField, Label, Segment, List } from 'semantic-ui-react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nexport default function MyPlaceInput({ label, options, ...props }) {\n  const [field, meta, helpers] = useField(props);\n\n  function handleSelect(address) {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => helpers.setValue({ address, latLng }))\n      .catch((error) => helpers.setError(error));\n  }\n\n  function handleBlur(e) {\n      field.onBlur(e);\n      if (!field.value.latLng) {\n          helpers.setValue({address: '', latLng: null})\n      }\n  }\n\n  return (\n    <PlacesAutocomplete\n      value={field.value['address']}\n      onChange={(value) => helpers.setValue({ address: value })}\n      onSelect={(value) => handleSelect(value)}\n      searchOptions={options}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <FormField error={meta.touched && !!meta.error}>\n          <input {...getInputProps({ name: field.name, onBlur: (e) => handleBlur(e), ...props })} />\n          {meta.touched && meta.error ? (\n            <Label basic color='red'>\n              {meta.error['address']}\n            </Label>\n          ) : null}\n          {suggestions?.length > 0 && (\n            <Segment\n              loading={loading}\n              style={{\n                marginTop: 0,\n                position: 'absolute',\n                zIndex: 1000,\n                width: '100%',\n              }}\n            >\n              <List selection>\n                {suggestions.map((suggestion) => (\n                  <List.Item {...getSuggestionItemProps(suggestion)}>\n                    <List.Header>\n                      {suggestion.formattedSuggestion.mainText}\n                    </List.Header>\n                    <List.Description>\n                      {suggestion.formattedSuggestion.secondaryText}\n                    </List.Description>\n                  </List.Item>\n                ))}\n              </List>\n            </Segment>\n          )}\n        </FormField>\n      )}\n    </PlacesAutocomplete>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}